{"openapi": "3.0.2", "info": {"title": "Cloudmesh Queue: A job queue scheduler for remote/local servers.", "description": "The [cloudmesh-queue](https://github.com/cloudmesh/cloudmesh-queue#cloudmesh-queue)\n            provides a job queuing and scheduling \n            framework. It includes a library as well as a commandline interface. \n            Both allow users to leverage registered and available compute resources to \n            perform compute intensive tasks with high excution times. \n            A user can configure all available compute resources \n            as 'hosts' in a configuration file along with the list of jobs to be \n            executed. Then, based on the scheduler policy, user can schedule \n            these jobs on configured hosts. ", "version": "0.1.0"}, "paths": {"/": {"get": {"summary": "Root", "description": "    ", "operationId": "root__get", "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/": {"get": {"tags": ["queue"], "summary": "List Queues", "description": "Lists the queues stored in the provided experiment directory.\n\n- **experiment**: a target directory to list its contained queue files.", "operationId": "list_queues_queue__get", "parameters": [{"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}, "post": {"tags": ["queue"], "summary": "Queue Create", "description": "Creates a queue with the given name and experiment.\n\nThis will create a yaml file `\"name\"-queue.yaml`\nin the server sub-directory `./\"experiment`\":\n\n- **name**: the queue must have a name.\n- **experiment**: a user defined sub-directory to store the queue.", "operationId": "queue_create_queue__post", "parameters": [{"required": true, "schema": {"title": "Name", "type": "string"}, "name": "name", "in": "query"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/ran": {"put": {"tags": ["queue"], "summary": "Refresh And List Ran Queues", "description": "The server maintains a list of queues that it has run.\n\nThis command will refresh all queues contained in this list and provide\ntheir information including queue info, pid, cluster used, and current status (running, not running).\n\nAfter a queue has determined as not running, it will be removed from the servers list\nof running queuse, and it will no longer be presented by subsequent requests of this command.\n\nThe server's list of ran queues is reset on a server restart.", "operationId": "refresh_and_list_ran_queues_queue_ran_put", "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/{queue}": {"get": {"tags": ["queue"], "summary": "Queue Get", "description": "Returns a json representation of the full backing file of the queue `\"queue\"-queue.yaml`\nin the experiment directory.", "operationId": "queue_get_queue__queue__get", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}, "post": {"tags": ["queue"], "summary": "Queue Add Job", "description": "Adds a job to the provided queue.\n\n- **name**: takes a single or expandable name. For example job[1-10] will create\n10 jobs with the same parameters, and names job1 to job10.\n- **command**: the command that will be run by the job, e.g. `python test.py`\n- **input**: the location of input used by the command.\n- **output**: the location of output created by executing the command.\n- **status**: the status of the job. See\n[here](https://github.com/cloudmesh/cloudmesh-queue/blob/main/README.md#job-states)\nfor a full list of job states.\n- **gpu**: is the GPUs to be set with the environment variable\nCUDA_VISIBLE_DEVICES=. Only include the numbers, i.e. 0,1 and not the environment\nvariable name.\n- **user** and **host**: The user and host are the user and host that this job are\nassigned to. Some schedulers require these jobs to be set, others will assign them\nfrom a group of hosts.\n- **shell**: is the shell that will run the command.\n- **log**: is the location of the log output\n- **pyenv**: is the argument to the source command and will be executed before\nrunning the job to activate a python environment.", "operationId": "queue_add_job_queue__queue__post", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": true, "schema": {"title": "Name", "type": "string"}, "name": "name", "in": "query"}, {"required": true, "schema": {"title": "Command", "type": "string"}, "name": "command", "in": "query"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}, {"required": false, "schema": {"title": "Input", "type": "string"}, "name": "input", "in": "query"}, {"required": false, "schema": {"title": "Output", "type": "string"}, "name": "output", "in": "query"}, {"required": false, "schema": {"title": "Status", "type": "string"}, "name": "status", "in": "query"}, {"required": false, "schema": {"title": "Gpu", "type": "string"}, "name": "gpu", "in": "query"}, {"required": false, "schema": {"title": "User", "type": "string"}, "name": "user", "in": "query"}, {"required": false, "schema": {"title": "Host", "type": "string"}, "name": "host", "in": "query"}, {"required": false, "schema": {"title": "Shell", "type": "string"}, "name": "shell", "in": "query"}, {"required": false, "schema": {"title": "Log", "type": "string"}, "name": "log", "in": "query"}, {"required": false, "schema": {"title": "Pyenv", "type": "string"}, "name": "pyenv", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}, "delete": {"tags": ["queue"], "summary": "Queue Delete", "description": "Deletes the queue in the provided experiment directory.", "operationId": "queue_delete_queue__queue__delete", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/{queue}/info": {"get": {"tags": ["queue"], "summary": "Queue Info", "description": "Returns a tabular text representation of the following queue fields:\n\"name\", \"status\", \"command\",\"host\",\"user\", \"gpu\", \"output\", \"log\", and \"experiment\".\n\nNote the info command does not affect the content of the backing queue-file. To get\nthe latest status of a runnig queue use the `Queue Refresh` request.", "operationId": "queue_info_queue__queue__info_get", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/{queue}/job/{job}": {"get": {"tags": ["queue"], "summary": "Queue Get Job", "description": "Returns a json representation of the requested job.", "operationId": "queue_get_job_queue__queue__job__job__get", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": true, "schema": {"title": "Job", "type": "string"}, "name": "job", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}, "delete": {"tags": ["queue"], "summary": "Queue Delete Job", "description": "Deletes the expandable list of jobs provided by the **name** argument, e.g. `name=job[1-10]`.", "operationId": "queue_delete_job_queue__queue__job__job__delete", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": true, "schema": {"title": "Name", "type": "string"}, "name": "name", "in": "query"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/{queue}/refresh": {"put": {"tags": ["queue"], "summary": "Queue Refresh", "description": "This refreshes the status of a queue. It is useful for determining the state of a running\nqueue. It can be used to recover the latest job status from a queue manager or worker host failure.\n\nIf any jobs are in the state \"run\" or \"start\" then the host\nrunning the job will be queried to get the latest job information.\n\nThis info view of the updated queue is returned.", "operationId": "queue_refresh_queue__queue__refresh_put", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/{queue}/run_fifo": {"put": {"tags": ["queue"], "summary": "Queue Run Fifo", "description": "Runs the queue with a simple fifo scheduler.\n\n- **max_parallel**: is the maximum number of parallel jobs that will be executed by the scheduler.\n- **timeout**: is the time that will consider a host as dead and mark the job as crashed.\nThe default is 10 minutes.\n\n**Prerequisites**: All jobs intended to be run must be assigned a `user` and a `host`.\nThose jobs not assigned a `user` and `host` will be skipped.\n\n**Failure Recovery**: See\n[here](https://github.com/cloudmesh/cloudmesh-queue/blob/main/README.md#failure-considerations)\nfor failure recovery instructions.", "operationId": "queue_run_fifo_queue__queue__run_fifo_put", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": true, "schema": {"title": "Max Parallel", "type": "integer"}, "name": "max_parallel", "in": "query"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}, {"required": false, "schema": {"title": "Timeout", "type": "integer", "default": 10}, "name": "timeout", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/{queue}/run_fifo_multi": {"put": {"tags": ["queue"], "summary": "Queue Run Fifo Multi", "description": "Runs the queue with a fifo scheduler that assigns jobs to hosts provided in a cluster definition.\n\n- **cluster**: jobs will be assigned to active hosts contained in this cluster.\nThis cluster definition must be in the same **experiment** directory as the queue.\n- **timeout**: is the time that will consider a host as dead and mark the job as crashed.\nThe default is 10 minutes.\n\nAll jobs in the queue with a state \"undefined\" or \"ready\" will be executed.\n\n**Failure Recovery**: See\n[here](https://github.com/cloudmesh/cloudmesh-queue/blob/main/README.md#failure-considerations-1)\nfor failure recovery instructions.", "operationId": "queue_run_fifo_multi_queue__queue__run_fifo_multi_put", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "query"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}, {"required": false, "schema": {"title": "Timeout", "type": "integer", "default": 10}, "name": "timeout", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/queue/{queue}/stop": {"put": {"tags": ["queue"], "summary": "Queue Stop", "description": "Stops the execution of a queue and its running jobs. Returns a info representation of the\nqueue after it has been stopped.", "operationId": "queue_stop_queue__queue__stop_put", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}}}, "/queue/{queue}/reset": {"put": {"tags": ["queue"], "summary": "Queue Reset", "description": "Resets the status of a queue and removes the job directories from remote hosts.\n\nIf you do not specify a **name** or **status**  argument. Then all jobs with\na state other than `end` will be reset.\n\nUse the **name** argument to reset specific jobs.\n\nUse the **status** argument to reset jobs with a specific status (one status only,\ne.g. status = end).\n\nIf you want to rerun jobs in a queue or recover from a crash you will need to\nreset the jobs. Resetting a job resets the state to a executable state (`undefined`\nor `start` depending on `user` and `host` assignment.) It also kills the jobs if they\nare currently running and removes the job directory from the assigned host.\n\n>WARNING: if you simply replace a job using `queue add` or rerun a job without a\n `reset` you will not get the result you expect, as the job files from the last run\n will not have been deleted.", "operationId": "queue_reset_queue__queue__reset_put", "parameters": [{"required": true, "schema": {"title": "Queue", "type": "string"}, "name": "queue", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}, {"required": false, "schema": {"title": "Name", "type": "string"}, "name": "name", "in": "query"}, {"required": false, "schema": {"title": "Status", "type": "string"}, "name": "status", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/cluster/": {"get": {"tags": ["cluster"], "summary": "Cluster List", "description": "Lists the clusters stored in the provided experiment directory.\n\n- **experiment**: a target directory to list its contained queue files.", "operationId": "cluster_list_cluster__get", "parameters": [{"required": false, "schema": {"title": "Experiment", "type": "string"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}, "post": {"tags": ["cluster"], "summary": "Cluster Create", "description": "Creates a cluster with the given name and experiment.\n\nThis will create a yaml file `\"name\"-cluster.yaml`\nin the server sub-directory `./\"experiment`\":\n\n- **name**: the cluster must have a name.\n- **experiment**: a user defined sub-directory to store the cluster.", "operationId": "cluster_create_cluster__post", "parameters": [{"required": true, "schema": {"title": "Name", "type": "string"}, "name": "name", "in": "query"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/cluster/{cluster}": {"get": {"tags": ["cluster"], "summary": "Cluster Get", "description": "Returns a json representation of the full backing file of the cluster `\"cluster\"-cluster.yaml`\nin the experiment directory.", "operationId": "cluster_get_cluster__cluster__get", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}, "post": {"tags": ["cluster"], "summary": "Cluster Add Host", "description": "Add a host to the cluster.\n\n- **id**: an expandable unique id for the hosts being added, e.g. host0[1-10]\n will create ten hosts with ids: host01 through host10\n - **name**: the hostname of the machine that will be accessed\n - **user**: the username for the target host machine.\n - **status**: the status of the host. The default status(**active**) can be assigned jobs by a scheduler, all others will not.\n - **gpu**: is the GPUs to be set with the environment variable\nCUDA_VISIBLE_DEVICES=. Only include the numbers, i.e. 0,1 and not the environment\nvariable name.\n  - **pyenv**: is the argument to the source command and will be executed before\nrunning the job to activate a python environment.\n\nAll hosts allow 1 maximum job when a scheduler is assigning jobs. To run multiple\njobs on the same machine, define multiple hosts for that machine.", "operationId": "cluster_add_host_cluster__cluster__post", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": true, "schema": {"title": "Id", "type": "string"}, "name": "id", "in": "query"}, {"required": true, "schema": {"title": "Name", "type": "string"}, "name": "name", "in": "query"}, {"required": true, "schema": {"title": "User", "type": "string"}, "name": "user", "in": "query"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}, {"required": false, "schema": {"title": "Ip", "type": "string"}, "name": "ip", "in": "query"}, {"required": false, "schema": {"title": "Status", "type": "string"}, "name": "status", "in": "query"}, {"required": false, "schema": {"title": "Gpu", "type": "integer"}, "name": "gpu", "in": "query"}, {"required": false, "schema": {"title": "Pyenv", "type": "string"}, "name": "pyenv", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}, "delete": {"tags": ["cluster"], "summary": "Cluster Delete", "description": "Deletes the cluster in the provided experiment directory.", "operationId": "cluster_delete_cluster__cluster__delete", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/cluster/{cluster}/info": {"get": {"tags": ["cluster"], "summary": "Cluster Info", "description": "Returns a tabular text representation of the following cluster fields:\n\"id\", \"name\", \"user\", \"status\", \"gpu\", \"pyenv\", \"ip\", \"max_jobs_allowed\".", "operationId": "cluster_info_cluster__cluster__info_get", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/cluster/{cluster}/id/{id}": {"get": {"tags": ["cluster"], "summary": "Cluster Get Host", "description": "Returns a json representation of the requested host.", "operationId": "cluster_get_host_cluster__cluster__id__id__get", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": true, "schema": {"title": "Id", "type": "string"}, "name": "id", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"application/json": {"schema": {}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}, "delete": {"tags": ["cluster"], "summary": "Cluster Delete Host", "description": "Deletes the expandable list of hosts provided by the **name** argument, e.g. `name=host[1-10]`.", "operationId": "cluster_delete_host_cluster__cluster__id__id__delete", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": true, "schema": {"title": "Id", "type": "string"}, "name": "id", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/cluster/{cluster}/id/{id}/activate": {"put": {"tags": ["cluster"], "summary": "Cluster Activate Host", "description": "Sets the status of the expandable list of host ids **id** to **active**.", "operationId": "cluster_activate_host_cluster__cluster__id__id__activate_put", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": true, "schema": {"title": "Id", "type": "string"}, "name": "id", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/cluster/{cluster}/id/{id}/deactivate": {"put": {"tags": ["cluster"], "summary": "Cluster Deactivate Host", "description": "Sets the status of the expandable list of host ids **id** to **inactive**.", "operationId": "cluster_deactivate_host_cluster__cluster__id__id__deactivate_put", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": true, "schema": {"title": "Id", "type": "string"}, "name": "id", "in": "path"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}, "/cluster/{cluster}/id/{id}/set": {"put": {"tags": ["cluster"], "summary": "Cluster Set Host", "description": "Sets the **key** of the expandable list of host ids **id** to the value **value**.", "operationId": "cluster_set_host_cluster__cluster__id__id__set_put", "parameters": [{"required": true, "schema": {"title": "Cluster", "type": "string"}, "name": "cluster", "in": "path"}, {"required": true, "schema": {"title": "Id", "type": "string"}, "name": "id", "in": "path"}, {"required": true, "schema": {"title": "Key", "type": "string"}, "name": "key", "in": "query"}, {"required": true, "schema": {"title": "Value", "type": "string"}, "name": "value", "in": "query"}, {"required": false, "schema": {"title": "Experiment", "type": "string", "default": "experiment"}, "name": "experiment", "in": "query"}], "responses": {"200": {"description": "Successful Response", "content": {"text/plain": {"schema": {"type": "string"}}}}, "422": {"description": "Validation Error", "content": {"application/json": {"schema": {"$ref": "#/components/schemas/HTTPValidationError"}}}}}, "security": [{"HTTPBasic": []}]}}}, "components": {"schemas": {"HTTPValidationError": {"title": "HTTPValidationError", "type": "object", "properties": {"detail": {"title": "Detail", "type": "array", "items": {"$ref": "#/components/schemas/ValidationError"}}}}, "ValidationError": {"title": "ValidationError", "required": ["loc", "msg", "type"], "type": "object", "properties": {"loc": {"title": "Location", "type": "array", "items": {"type": "string"}}, "msg": {"title": "Message", "type": "string"}, "type": {"title": "Error Type", "type": "string"}}}}, "securitySchemes": {"HTTPBasic": {"type": "http", "scheme": "basic"}}}, "tags": [{"name": "queue", "description": "Operations on queues.", "externalDocs": {"description": "Queue external docs.", "url": "https://github.com/cloudmesh/cloudmesh-queue/blob/main/README.md#queue"}}, {"name": "cluster", "description": "Operations on clusters", "externalDocs": {"description": "Cluster external docs.", "url": "https://github.com/cloudmesh/cloudmesh-queue/blob/main/README.md#cluster"}}]}